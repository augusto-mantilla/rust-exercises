* Check out the book
  [[https://doc.rust-lang.org/stable/book/title-page.html][Rust book]]
* If you prefer to learn by example
  [[https://doc.rust-lang.org/stable/rust-by-example/index.html][Rust by Example]]
* Clone this repo and complete the exercises
  - Run: *cargo test* to check your solution
* Content Structure
** Variables and Definitions (Quest 1 -> 1 day)
*** Variables (Scalar type), control flow (if, while, loop, for), functions
    Defining and using the basic types with simple functions
    - [[file:fibonacci/src/main.rs][fibonacci]] (int, boolean)
    - [[file:scalar/src/main.rs][scalar]] (Scalar Types: integer types)
    - [[file:temperature_conv/src/main.rs][temperature_conv]] (float)
    - [[file:looping/src/main.rs][looping]] (chars and bytes, boolean)
    - [[file:speed_transformation/src/main.rs][speed_transformation]] (float)
    - [[file:groceries/src/main.rs][groceries]] (Vec)
    - [[file:reverse-string/src/main.rs][reverse-string]]
    - [[file:find_factorial/src/main.rs][find_factorial]]
*** Tuples:
    Practicing tuple definition, accessing, destructuring and matching
    - [[file:matrix_transposition/src/main.rs][matrix_transposition]]
    - [[file:division_and_remainder/src/main.rs][division_and_remainder]]
    - [[file:tuples/src/main.rs][tuples]]
    -  Total: 11
** Memory Management (Quest 2 -> 1 days)
    - [[file:crud/src/lib.rs][crud]]
*** Ownership
    Understanding the ownership rules and how to deal with different types of data
    - [[file:ownership/src/main.rs][ownership]]
    - [[file:borrow/src/main.rs][borrow]]
    - [[file:mutability/src/main.rs][mutability]]
*** References
    - [[file:reference_rules/src/main.rs][reference_rules]]
    - [[file:changes/src/main.rs][changes]]
      Total: 6
** Complex Data Structures (Quest 3 -> 2 days)
*** Structs
    - [[file:circle/src/main.rs][circle]]
*** Enums
    - [[file:card_deck/src/main.rs][card_deck]]
*** Array
    - [[file:arrays/src/main.rs][arrays]]
*** Strings
    - [[file:strings/src/main.rs][strings]]
    - [[file:edit_distance/src/main.rs][edit_distance]]
    - [[file:to_url/src/main.rs][to_url]]
    - [[file:capitalizing/src/main.rs][capitalizing]]
*** HashMaps
    - [[file:hashing/src/main.rs][hashing]]
    - [[file:string_permutation/src/main.rs][string_permutation]]
    - [[file:bigger/src/main.rs][bigger]]
    - [[file:simple-hash/src/main.rs][simple-hash]]
*** Methods
    - [[file:collect/src/main.rs][collect]]
      Total: 12
** Error Handling (Quest 4 -> 1 day)
*** unwrap and expect
    - [[file:unwrap_or_expert/src/lib.rs][unwrap_and_expect]]
*** Panic
    - [[file:panic/src/main.rs][panic]]
    - [[file:handling/src/main.rs][handling]]
*** Option
    - [[file:options/src/lib.rs][options]]
    - [[file:question_mark/src/lib.rs][question_mark]]
*** Result<T,E>
    - [[file:banner/src/lib.rs][banner]]
*** Multiple error types
    - [[file:error_types/src/lib.rs][error_types]]
    - [[file:boxing/src/lib.rs][boxing]]
      Total: 8
** Packages, Crates and modules (Quest 5 -> 1 day)
   Learning how to organize projects separating them into components (packages and modules), unit testing and importing crates
   - [[file:drawing/src/main.rs][modules]]
   - [[file:drawing/src/main.rs][does_it_fit]]
   - [[file:drawing/src/main.rs][macro_calculator]]
   - [[file:drawing/src/main.rs][mobs]]
     Total: 4
** Generic Types, Traits and Lifetimes (Quest 6 -> 2 days)
   Using generics to create flexible data structures, creating polymorphic code using traits and learning to deal with references through lifetimes
*** Generics
    - [[file:generics/src/main.rs][generics]]
    - [[file:matrix/src/scalar.rs][scalar]]
    - [[file:matrix/src/lib.rs][matrix]]
*** Traits
    - [[file:traits/src/main.rs][traits]]
    - [[file:blood_types/src/main.rs][blood_types]]
    - [[file:vehicles/src/lib.rs][vehicles]]
    - [[file:roman_numbers/src/lib.rs][roman_numbers]]
    - [[file:vector_operations/src/lib.rs][vector_operations]]
    - [[file:roman_numbers/src/iterator.rs][iterating]]
*** Lifetimes
    - [[file:lifetimes/src/main.rs][lifetimes]]
      Total: 10
** Smart Pointers (Quest 7 -> 1 day)
** Functional Languages Features (Quest 8 -> 2 days)
*** Closures
    - [[file:closures/src/main.rs][closures]]
*** Iterators
    Total: 1
** Object Oriented Programming Features (Quest 9 -> 1 day)
   Using Trait Objects That Allow for Values of Different Types.
   Total: 0
** Pattern Matching (Quest 10 -> 1 day)
   Pattern matching syntax
    - [[file:logic-number/src/main.rs][logic-number]]
    - [[file:rot/src/main.rs][rot]]
      Total: 2
